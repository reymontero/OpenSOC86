// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.


// Generated by Quartus II 64-Bit Version 13.0 (Build Build 232 06/12/2013)
// Created on Thu May 01 18:41:53 2014

cpu_top cpu_top_inst
(
	.iClk(iClk_sig) ,	// input  iClk_sig
	.iRst(iRst_sig) ,	// input  iRst_sig
	.iRamAck(iRamAck_sig) ,	// input  iRamAck_sig
	.iAck_8237(iAck_8237_sig) ,	// input  iAck_8237_sig
	.iAck_8253(iAck_8253_sig) ,	// input  iAck_8253_sig
	.iAck_8259(iAck_8259_sig) ,	// input  iAck_8259_sig
	.iAck_video(iAck_video_sig) ,	// input  iAck_video_sig
	.iInt(iInt_sig) ,	// input  iInt_sig
	.iData_8237(iData_8237_sig) ,	// input [7:0] iData_8237_sig
	.iData_8253(iData_8253_sig) ,	// input [7:0] iData_8253_sig
	.iData_8259(iData_8259_sig) ,	// input [7:0] iData_8259_sig
	.iData_video(iData_video_sig) ,	// input [7:0] iData_video_sig
	.iInt_T(iInt_T_sig) ,	// input [7:0] iInt_T_sig
	.iRamData(iRamData_sig) ,	// input [31:0] iRamData_sig
	.oRamBW(oRamBW_sig) ,	// output  oRamBW_sig
	.oHalted(oHalted_sig) ,	// output  oHalted_sig
	.oBusAdr_8259(oBusAdr_8259_sig) ,	// output  oBusAdr_8259_sig
	.cur_Inst(cur_Inst_sig) ,	// output [63:0] cur_Inst_sig
	.DUMP(DUMP_sig) ,	// output [207:0] DUMP_sig
	.oBusAdr16(oBusAdr16_sig) ,	// output [15:0] oBusAdr16_sig
	.oBusAdr_8237(oBusAdr_8237_sig) ,	// output [3:0] oBusAdr_8237_sig
	.oBusAdr_8253(oBusAdr_8253_sig) ,	// output [1:0] oBusAdr_8253_sig
	.oBusAdr_video(oBusAdr_video_sig) ,	// output [6:0] oBusAdr_video_sig
	.oBusData16(oBusData16_sig) ,	// output [15:0] oBusData16_sig
	.oBusData8(oBusData8_sig) ,	// output [7:0] oBusData8_sig
	.oBusRW_8237(oBusRW_8237_sig) ,	// output [1:0] oBusRW_8237_sig
	.oBusRW_8253(oBusRW_8253_sig) ,	// output [1:0] oBusRW_8253_sig
	.oBusRW_8259(oBusRW_8259_sig) ,	// output [1:0] oBusRW_8259_sig
	.oBusRW_video(oBusRW_video_sig) ,	// output [1:0] oBusRW_video_sig
	.oRamAdr(oRamAdr_sig) ,	// output [19:0] oRamAdr_sig
	.oRamBurst(oRamBurst_sig) ,	// output [1:0] oRamBurst_sig
	.oRamData(oRamData_sig) ,	// output [15:0] oRamData_sig
	.oRamRW(oRamRW_sig) ,	// output [1:0] oRamRW_sig
	.oTmpOut(oTmpOut_sig) 	// output [15:0] oTmpOut_sig
);

